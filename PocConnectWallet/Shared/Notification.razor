@inject NotificationService _notificationService

@if (!string.IsNullOrWhiteSpace(Message))
{
	<div style="position: absolute; top: 80px; width: 100%; z-index: 9999; display: flex; justify-content: center;">
		<div class="alert alert-danger text-center" role="alert" style="min-width: 50%;">
			<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-exclamation-triangle-fill" viewBox="0 0 16 16">
			  <path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
			</svg>
			@Message
		</div>
	</div>
}

@code {
	public string? Message { get; set; }

	protected override void OnInitialized()
	{
		_notificationService.OnNotify += OnNotify;
	}

	private void OnNotify(string message)
	{
		Message = message;
		StateHasChanged();

		Task.Delay(3000).ContinueWith((task) =>
		{
			InvokeAsync(() =>
			{
				Message = null;
				StateHasChanged();
			});
		});
	}

	public void Dispose()
    {
        _notificationService.OnNotify -= OnNotify;
    }
}
